plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

version = mineria_version
group = mineria_group
archivesBaseName = "mineria"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=mineria.mixins.json"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            mods {
                mineria {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')
            arg "-mixin.config=mineria.mixins.json"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

            mods {
                mineria {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=mineria.mixins.json"

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.ansi', 'true'

//            environment 'assetIndex', '{asset_index}'
//            environment 'assetDirectory', '{assets_root}'

            args '--mod', 'mineria', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mineria {
                    source sourceSets.main
                }
            }


        }
    }
}

sourceSets.main.resources {
    srcDirs 'src/generated/resources'
    exclude '.cache'
}

repositories {
    mavenCentral()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { url = 'https://dist.creeper.host/Sponge/maven' }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "Saps Maven (for X-Ray)"
        url = "https://maven.saps.dev/releases"
    }
    // Included here my fork of advanced xray as the original one crashes the game when running in data mode.
    flatDir {
        name = "XRay Fork"
        dir(projectDir.toPath().resolveSibling("XRay-Mod").resolve("build/libs"))
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${terrablender_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("pro.mikey:advanced-xray-forge:1.19.3-2.14.0-build.9999")
    runtimeOnly fg.deobf("curse.maven:better-advancements-272515:4364745")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

processResources {
    inputs.property "mineria_version", project.version
    filteringCharset "UTF-8"

    filesMatching("META-INF/mods.toml") {
        expand "mineria_version": project.version
    }

    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

java {
    libsDirName = libsDirName.concat("/${project.mc_version}")
//    withSourcesJar()
}

jar {
    archiveVersion.set(archiveVersion.get().concat("-mc${mc_version}"))

    manifest {
        attributes([
            "Specification-Title": "mineria",
            "Specification-Vendor": "mineria",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${mineria_version}",
            "Implementation-Vendor" :"mineria",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mineria.mixins.json"
        ])
    }

    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

mixin {
    add sourceSets.main, "mineria.refmap.json"
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}